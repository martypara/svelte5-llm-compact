# Svelte 5 Runes Overview



---
## $State
---

<!-- ================================== -->
<!-- Example 1: Basic Usage of $state -->
<!-- ================================== -->

<!-- Demonstrates how to create and update a reactive state variable using $state. -->

---

<!-- Filename: Counter.svelte -->
<script>
	let count = $state(0); // count is reactive
</script>

<button onclick={() => count++}>
	clicks: {count} <!-- UI updates automatically when count changes -->
</button>

---

<!-- Notes: -->
<!-- - $state makes `count` reactive. -->
<!-- - You can modify `count` like a normal variable, no need for a special setter. -->

<!-- ================================== -->
<!-- Example 2: Deep Reactivity with Arrays -->
<!-- ================================== -->

<!-- Demonstrates how $state makes arrays deeply reactive. -->

---

<!-- Filename: TodoList.svelte -->
<script>
	let todos = $state([
		{ done: false, text: 'Learn Svelte' },
		{ done: false, text: 'Build an app' }
	]);

	function toggle(index) {
		todos[index].done = !todos[index].done; // Reactivity applies to individual items
	}
</script>

<ul>
	{#each todos as todo, index}
		<li>
			<input type="checkbox" bind:checked={todo.done} onclick={() => toggle(index)} />
			{todo.text}
		</li>
	{/each}
</ul>

<button onclick={() => todos.push({ done: false, text: 'New task' })}>
	Add Todo
</button>

---

<!-- Notes: -->
<!-- - `todos` is a reactive proxy, meaning updates to properties trigger UI updates. -->
<!-- - `todos.push()` automatically makes new objects reactive. -->

<!-- ================================== -->
<!-- Example 3: Reactivity in Classes -->
<!-- ================================== -->

<!-- Demonstrates using $state inside a class to create reactive properties. -->

---

<!-- Filename: TodoClassExample.svelte -->
<script>
	class Todo {
		done = $state(false);
		text = $state('');

		constructor(text) {
			this.text = text;
		}

		reset = () => {
			this.text = '';
			this.done = false;
		}
	}

	let todo = new Todo('Buy groceries');
</script>

<p>{todo.text} - {todo.done ? 'Done' : 'Not done'}</p>
<button onclick={() => todo.done = !todo.done}>Toggle</button>
<button onclick={() => todo.reset()}>Reset</button>

---

<!-- Notes: -->
<!-- - Using an arrow function for `reset` ensures `this` remains correct. -->
<!-- - Class properties become reactive with $state. -->

<!-- ================================== -->
<!-- Example 4: Using $state.raw -->
<!-- ================================== -->

<!-- Demonstrates when to use $state.raw to avoid deep reactivity. -->

---

<!-- Filename: RawStateExample.svelte -->
<script>
	let person = $state.raw({
		name: 'Alice',
		age: 30
	});

	function updatePerson() {
		// This won't work because `person` is raw (not reactive)
		person.age += 1; 

		// Instead, we must reassign the whole object
		person = { ...person, age: person.age + 1 };
	}
</script>

<p>{person.name} is {person.age} years old.</p>
<button onclick={updatePerson}>Increase Age</button>

---

<!-- Notes: -->
<!-- - `person.age += 1` does nothing because $state.raw objects are immutable. -->
<!-- - To update, replace the entire object. -->

<!-- ================================== -->
<!-- Example 5: Taking a Snapshot of Reactive State -->
<!-- ================================== -->

<!-- Demonstrates how to extract a non-proxied snapshot of a reactive object. -->

---

<!-- Filename: SnapshotExample.svelte -->
<script>
	let counter = $state({ count: 0 });

	function logSnapshot() {
		console.log($state.snapshot(counter)); // Logs a plain object, not a Proxy
	}
</script>

<p>Count: {counter.count}</p>
<button onclick={() => counter.count++}>Increment</button>
<button onclick={logSnapshot}>Log Snapshot</button>

---

<!-- Notes: -->
<!-- - `snapshot` removes reactivity, making it safe to pass to external libraries. -->

<!-- ================================== -->
<!-- Example 6: Passing Reactive State to Functions -->
<!-- ================================== -->

<!-- Demonstrates passing a reactive state into a function and ensuring it remains reactive. -->

---

<!-- Filename: FunctionStateExample.svelte -->
<script>
	function add(getA, getB) {
		return () => getA() + getB();
	}

	let a = $state(1);
	let b = $state(2);
	let total = add(() => a, () => b); // Pass getters to maintain reactivity
</script>

<p>{a} + {b} = {total()}</p>
<button onclick={() => a++}>Increment A</button>
<button onclick={() => b++}>Increment B</button>

---

<!-- Notes: -->
<!-- - Directly passing `a` and `b` would not be reactive. -->
<!-- - Using getter functions ensures the function always retrieves the latest values. -->


---
## $Derived
---

<!-- ================================== -->
<!-- Example 1: Basic Derived State -->
<!-- ================================== -->

<!-- Demonstrates how `$derived` updates a value based on `$state`. -->

---

<!-- Filename: App.svelte -->
<script lang="ts">
	let count = $state(0);
	let doubled = $derived(count * 2); // `doubled` automatically updates when `count` changes
</script>

<button onclick={() => count++}>
	Increment
</button>

<p>{count} doubled is {doubled}</p>

---

<!-- Notes: -->
- `$derived(count * 2)` ensures `doubled` always reflects the latest `count`.
- You **cannot** modify state inside `$derived`, e.g., `count++` inside the expression.

<!-- ================================== -->
<!-- Example 2: Using $derived.by for Complex Computation -->
<!-- ================================== -->

<!-- Demonstrates how `$derived.by` allows more complex calculations. -->

---

<!-- Filename: App.svelte -->
<script lang="ts">
	let numbers = $state([1, 2, 3]);

	// `total` is automatically recalculated when `numbers` change
	let total = $derived.by(() => {
		let sum = 0;
		for (const n of numbers) {
			sum += n;
		}
		return sum;
	});
</script>

<button onclick={() => numbers.push(numbers.length + 1)}>
	Add Number
</button>

<p>{numbers.join(' + ')} = {total}</p>

---

<!-- Notes: -->
- `$derived.by(() => { ... })` is useful when the derived state requires loops or multiple steps.
- The derived state (`total`) automatically updates when `numbers` change.

<!-- ================================== -->
<!-- Example 3: Understanding Dependencies -->
<!-- ================================== -->

<!-- Shows how derived state tracks dependencies and updates accordingly. -->

---

<!-- Filename: App.svelte -->
<script lang="ts">
	let count = $state(0);
	let isEven = $derived(count % 2 === 0);
</script>

<button onclick={() => count++}>
	Increment
</button>

<p>{count} is {isEven ? 'Even' : 'Odd'}</p>

---

<!-- Notes: -->
- `$derived` tracks all **synchronously accessed** state inside its expression.
- If `count` changes, `isEven` will automatically update.

<!-- ================================== -->
<!-- Example 4: Avoiding Unnecessary Updates -->
<!-- ================================== -->

<!-- Demonstrates how Svelte skips updates when derived values remain the same. -->

---

<!-- Filename: App.svelte -->
<script lang="ts">
	let count = $state(0);
	let large = $derived(count > 10);
</script>

<button onclick={() => count++}>
	Increment
</button>

<p>Is count large? {large}</p>

---

<!-- Notes: -->
- Svelte **only updates** when `large` changes (`false` → `true` or vice versa).
- If `count` changes **within the same threshold** (e.g., `5 → 6`), no update occurs.

---


---
## $Effect
---

<!-- ================================== -->
<!-- Example 1: Basic Usage of $effect -->
<!-- ================================== -->

<!-- Demonstrates how to use `$effect` to reactively update a canvas when state changes. -->

---

<!-- Filename: Canvas.svelte -->
<script>
	let size = $state(50);
	let color = $state('#ff3e00');
	let canvas;

	$effect(() => {
		const context = canvas.getContext('2d');
		context.clearRect(0, 0, canvas.width, canvas.height);

		// This effect runs whenever `color` or `size` changes
		context.fillStyle = color;
		context.fillRect(0, 0, size, size);
	});
</script>

<canvas bind:this={canvas} width="100" height="100" />

<input type="color" bind:value={color} />
<input type="range" bind:value={size} min="10" max="100" />

---

<!-- Notes:
- `$effect` automatically tracks dependencies (`size`, `color`).
- Runs only in the browser, not during SSR.
- Avoid modifying state inside an effect to prevent infinite loops.
-->

<!-- ================================== -->
<!-- Example 2: Using Teardown in $effect -->
<!-- ================================== -->

<!-- Demonstrates how to return a cleanup function inside `$effect` to clear intervals. -->

---

<!-- Filename: Counter.svelte -->
<script>
	let count = $state(0);
	let milliseconds = $state(1000);

	$effect(() => {
		const interval = setInterval(() => {
			count += 1;
		}, milliseconds);

		// Cleanup function runs before effect re-runs or on component destroy
		return () => {
			clearInterval(interval);
		};
	});
</script>

<h1>{count}</h1>

<button onclick={() => (milliseconds *= 2)}>Slower</button>
<button onclick={() => (milliseconds /= 2)}>Faster</button>

---

<!-- Notes:
- The interval is cleared before the next effect run or when the component is destroyed.
- If `milliseconds` changes, the old interval is removed before a new one is created.
-->

<!-- ================================== -->
<!-- Example 3: Dependency Tracking in $effect -->
<!-- ================================== -->

<!-- Demonstrates how `$effect` only tracks dependencies accessed synchronously. -->

---

<!-- Filename: AsyncCanvas.svelte -->
<script>
	let size = $state(50);
	let color = $state('#ff3e00');
	let canvas;

	$effect(() => {
		const context = canvas.getContext('2d');
		context.clearRect(0, 0, canvas.width, canvas.height);

		// This effect re-runs when `color` changes but not when `size` changes
		context.fillStyle = color;

		setTimeout(() => {
			context.fillRect(0, 0, size, size);
		}, 0);
	});
</script>

<canvas bind:this={canvas} width="100" height="100" />

<input type="color" bind:value={color} />
<input type="range" bind:value={size} min="10" max="100" />

---

<!-- Notes:
- `size` is accessed inside `setTimeout`, so it is NOT a tracked dependency.
- The effect runs when `color` changes, but `size` updates do not trigger a re-run.
-->

<!-- ================================== -->
<!-- Example 4: $effect.pre for Pre-DOM Updates -->
<!-- ================================== -->

<!-- Demonstrates how `$effect.pre` can be used to run logic before the DOM updates. -->

---

<!-- Filename: AutoScroll.svelte -->
<script>
	import { tick } from 'svelte';

	let div = $state();
	let messages = $state([]);

	$effect.pre(() => {
		if (!div) return;

		// Tracks `messages.length` so the effect re-runs when messages change
		messages.length;

		// Auto-scroll logic before the DOM updates
		if (div.offsetHeight + div.scrollTop > div.scrollHeight - 20) {
			tick().then(() => {
				div.scrollTo(0, div.scrollHeight);
			});
		}
	});
</script>

<div bind:this={div}>
	{#each messages as message}
		<p>{message}</p>
	{/each}
</div>

<button onclick={() => messages = [...messages, 'New message']}>Add Message</button>

---

<!-- Notes:
- `$effect.pre` runs before the DOM updates.
- Useful for cases like auto-scrolling where timing is important.
-->

<!-- ================================== -->
<!-- Example 5: Avoiding Infinite Loops in $effect -->
<!-- ================================== -->

<!-- Demonstrates the correct way to derive state instead of modifying it within `$effect`. -->

---

<!-- Filename: DerivedState.svelte -->
<script>
	let count = $state(0);
	let doubled = $derived(count * 2); // Correct approach

	// Incorrect approach (causes infinite loops):
	// $effect(() => {
	//   doubled = count * 2;
	// });
</script>

<h1>{count} doubled is {doubled}</h1>

<button onclick={() => count += 1}>Increment</button>

---

<!-- Notes:
- Use `$derived` instead of modifying state inside `$effect`.
- Prevents unnecessary re-renders and infinite loops.
-->

---


---
## $Bindable
---

<!-- ================================== -->
<!-- Example 1: Basic Two-Way Binding with $bindable -->
<!-- ================================== -->

<!-- Demonstrates how to use `$bindable` to create a prop that can be bound to a parent component. -->

---

<!-- Filename: FancyInput.svelte -->
<script lang="ts">
	let { value = $bindable(), ...props } = $props(); // `value` is bindable, allowing two-way data flow
</script>

<input bind:value={value} {...props} />

---

<!-- Filename: App.svelte -->
<script lang="ts">
	import FancyInput from './FancyInput.svelte';

	let message = $state('hello'); // Using `$state` to create a reactive state variable
</script>

<FancyInput bind:value={message} />
<p>{message}</p> <!-- This will update as the user types in the input -->

---

<!-- Notes: -->
<!-- - The `bind:value` directive ensures that `message` in the parent updates when the input changes. -->
<!-- - This is useful for creating reusable, controlled input components. -->
<!-- - The parent is not required to bind to `value`; it can simply pass a normal prop. -->

<!-- ================================== -->
<!-- Example 2: Default Fallback for Bindable Props -->
<!-- ================================== -->

<!-- Shows how to provide a default value when the parent does not pass a bindable prop. -->

---

<!-- Filename: FancyInput.svelte -->
<script lang="ts">
	let { value = $bindable('fallback'), ...props } = $props(); // Default value set to 'fallback'
</script>

<input bind:value={value} {...props} />

---

<!-- Filename: App.svelte -->
<script lang="ts">
	import FancyInput from './FancyInput.svelte';
</script>

<FancyInput /> <!-- No `bind:value`, so it defaults to 'fallback' -->

---

<!-- Notes: -->
<!-- - If `value` is not provided by the parent, it starts with 'fallback'. -->
<!-- - This is useful for ensuring a component always has a meaningful initial state. -->

<!-- ================================== -->
<!-- Example 3: Using $bindable with Multiple Props -->
<!-- ================================== -->

<!-- Demonstrates how to use multiple `$bindable` props in a single component. -->

---

<!-- Filename: FancyInput.svelte -->
<script lang="ts">
	let { value = $bindable('default text'), disabled = $bindable(false), ...props } = $props();
</script>

<input bind:value={value} bind:disabled={disabled} {...props} />

---

<!-- Filename: App.svelte -->
<script lang="ts">
	import FancyInput from './FancyInput.svelte';

	let message = $state('Editable text');
	let isDisabled = $state(false);
</script>

<FancyInput bind:value={message} bind:disabled={isDisabled} />
<button onclick={() => isDisabled = !isDisabled}>
	Toggle Disabled
</button>

---

<!-- Notes: -->
- The input's `value` and `disabled` states can both be bound to the parent.
- The button toggles the `disabled` state dynamically.
- Useful for forms and UI elements requiring controlled states.


---
## $Props
---

<!-- ================================== -->
<!-- Example 1: Basic Prop Usage with $props -->
<!-- ================================== -->

<!-- Demonstrates how to receive props in a Svelte component using $props -->

---

<!-- Filename: App.svelte -->
<script lang="ts">
	import MyComponent from './MyComponent.svelte';
</script>

<MyComponent adjective="cool" />

---

<!-- Filename: MyComponent.svelte -->
<script lang="ts">
	let props = $props();
</script>

<p>This component is {props.adjective}</p>

---

<!-- Explanation:
- `MyComponent` receives a prop `adjective`.
- The `$props` rune allows access to the props object inside `MyComponent`.
- `props.adjective` displays the value passed from `App.svelte`.
-->

<!-- ================================== -->
<!-- Example 2: Destructuring Props -->
<!-- ================================== -->

<!-- Demonstrates how to destructure props for cleaner code -->

---

<!-- Filename: MyComponent.svelte -->
<script lang="ts">
	let { adjective } = $props();
</script>

<p>This component is {adjective}</p>

---

<!-- Explanation:
- Instead of accessing `props.adjective`, we destructure `adjective` directly from `$props()`.
- This makes the code more concise and readable.
-->

<!-- ================================== -->
<!-- Example 3: Fallback Values for Props -->
<!-- ================================== -->

<!-- Demonstrates how to provide default values when a prop is not passed -->

---

<!-- Filename: MyComponent.svelte -->
<script lang="ts">
	let { adjective = 'happy' } = $props();
</script>

<p>This component is {adjective}</p>

---

<!-- Explanation:
- If `adjective` is not provided by the parent, it defaults to `'happy'`.
- The fallback value does **not** become reactive.
-->

<!-- ================================== -->
<!-- Example 4: Renaming Props -->
<!-- ================================== -->

<!-- Demonstrates how to rename props when destructuring -->

---

<!-- Filename: MyComponent.svelte -->
<script lang="ts">
	let { super: trouper = 'lights are gonna find me' } = $props();
</script>

<p>Song lyric: {trouper}</p>

---

<!-- Explanation:
- `super` is a reserved keyword in JavaScript.
- We rename `super` to `trouper` while destructuring.
- It also includes a default fallback value.
-->

<!-- ================================== -->
<!-- Example 5: Using Rest Props -->
<!-- ================================== -->

<!-- Demonstrates how to collect all remaining props using the rest syntax -->

---

<!-- Filename: MyComponent.svelte -->
<script lang="ts">
	let { a, b, c, ...others } = $props();
</script>

<p>a: {a}, b: {b}, c: {c}</p>
<p>Other props: {JSON.stringify(others)}</p>

---

<!-- Explanation:
- `a`, `b`, and `c` are extracted explicitly.
- The rest of the props are collected into the `others` object.
- This can be useful for passing arbitrary props to a child component.
-->

<!-- ================================== -->
<!-- Example 6: Updating Props (Ephemeral State) -->
<!-- ================================== -->

<!-- Demonstrates how prop values update when the parent changes, but can be overridden temporarily -->

---

<!-- Filename: App.svelte -->
<script lang="ts">
	import Child from './Child.svelte';

	let count = $state(0);
</script>

<button onclick={() => count += 1}>
	clicks (parent): {count}
</button>

<Child {count} />

---

<!-- Filename: Child.svelte -->
<script lang="ts">
	let { count } = $props();
</script>

<button onclick={() => count += 1}>
	clicks (child): {count}
</button>

---

<!-- Explanation:
- The `count` prop updates when changed in `App.svelte`.
- However, inside `Child.svelte`, `count` can be modified temporarily.
- This is useful for unsaved, ephemeral state.
-->

<!-- ================================== -->
<!-- Example 7: Avoiding Object Prop Mutation -->
<!-- ================================== -->

<!-- Demonstrates how object mutations do not work if props are plain objects -->

---

<!-- Filename: App.svelte -->
<script lang="ts">
	import Child from './Child.svelte';
</script>

<Child object={{ count: 0 }} />

---

<!-- Filename: Child.svelte -->
<script lang="ts">
	let { object } = $props();
</script>

<button onclick={() => object.count += 1}>
	clicks: {object.count}
</button>

---

<!-- Explanation:
- The object prop `{ count: 0 }` is passed to `Child.svelte`.
- Mutating `object.count` **does not update the parent**.
- This is because plain objects are not reactive.
-->

<!-- ================================== -->
<!-- Example 8: Mutating a Reactive Prop (Warning) -->
<!-- ================================== -->

<!-- Demonstrates the warning when mutating a reactive state prop -->

---

<!-- Filename: App.svelte -->
<script lang="ts">
	import Child from './Child.svelte';

	let object = $state({ count: 0 });
</script>

<Child {object} />

---

<!-- Filename: Child.svelte -->
<script lang="ts">
	let { object } = $props();
</script>

<button onclick={() => object.count += 1}>
	clicks: {object.count}
</button>

---

<!-- Explanation:
- `object` is a `$state` reactive proxy.
- Mutating `object.count` inside `Child.svelte` **does work**, but shows a warning.
- This warns against mutating state that does not "belong" to the child.
-->

<!-- ================================== -->
<!-- Example 9: Using $props.id() for Unique IDs -->
<!-- ================================== -->

<!-- Demonstrates how to generate unique component-scoped IDs -->

---

<!-- Filename: MyComponent.svelte -->
<script lang="ts">
	const uid = $props.id();
</script>

<form>
	<label for="{uid}-firstname">First Name: </label>
	<input id="{uid}-firstname" type="text" />

	<label for="{uid}-lastname">Last Name: </label>
	<input id="{uid}-lastname" type="text" />
</form>

---

<!-- Explanation:
- `$props.id()` generates a unique ID for this component instance.
- This is useful for accessibility (`for` and `aria-labelledby` attributes).
- Ensures consistency between server and client during hydration.
-->


---
## $Host
---

<!-- ================================== -->
<!-- Example 1: Using $host to Dispatch Events -->
<!-- ================================== -->

<!-- Demonstrates how to use $host inside a custom element to dispatch events. -->

---

<!-- Filename: Stepper.svelte -->
<svelte:options customElement="my-stepper" />

<script lang="ts">
	function dispatch(type) {
		$host().dispatchEvent(new CustomEvent(type)); 
		// $host() gives access to the custom element itself.
		// Dispatches 'increment' or 'decrement' events.
	}
</script>

<button onclick={() => dispatch('decrement')}>decrement</button>
<button onclick={() => dispatch('increment')}>increment</button>

---

<!-- Filename: App.svelte -->
<script lang="ts">
	import './Stepper.svelte';

	let count = $state(0); // State variable to track count
</script>

<my-stepper
	ondecrement={() => count -= 1} 
	onincrement={() => count += 1} 
></my-stepper>

<p>count: {count}</p> <!-- Displays updated count -->

---

<!-- Notes -->
- `$host()` only works in components compiled as **custom elements** (`<svelte:options customElement="..."/>`).
- This approach allows dispatching custom events from a **shadow DOM encapsulated component**.
- Ensure the parent component listens to the dispatched events (`ondecrement`, `onincrement`).


---
## $Inspect
---

<!-- ================================== -->
<!-- Example 1: Basic $inspect Usage -->
<!-- ================================== -->

<!-- Demonstrates how `$inspect` logs changes to reactive state in development mode. -->

---

<!-- Filename: App.svelte -->
<script>
	let count = $state(0);
	let message = $state('hello');

	$inspect(count, message); // Logs `count` and `message` whenever they change
</script>

<button onclick={() => count++}>Increment</button>
<input bind:value={message} />

---

<!-- Notes:
- `$inspect` will log changes to `count` and `message` automatically.
- It only works during development and is ignored in production.
- Useful for debugging reactive state.
-->

---

<!-- ================================== -->
<!-- Example 2: Custom Logging with .with -->
<!-- ================================== -->

<!-- Demonstrates how `$inspect(...).with` replaces default logging with a custom function. -->

---

<!-- Filename: App.svelte -->
<script>
	let count = $state(0);

	$inspect(count).with((type, count) => {
		if (type === 'update') {
			console.log(`Count updated to: ${count}`);
		}
	});
</script>

<button onclick={() => count++}>Increment</button>

---

<!-- Notes:
- Instead of logging automatically, `$inspect(count).with(...)` calls a custom function.
- The callback receives `type` (`"init"` or `"update"`) and the updated values.
- Useful for debugging or conditional logging.
-->

---

<!-- ================================== -->
<!-- Example 3: Tracing Changes with console.trace -->
<!-- ================================== -->

<!-- Demonstrates how to trace reactive state changes using `$inspect(...).with(console.trace)`. -->

---

<!-- Filename: App.svelte -->
<script>
	let message = $state('Hello');

	$inspect(message).with(console.trace);
</script>

<input bind:value={message} />

---

<!-- Notes:
- Using `console.trace` with `$inspect.with()` helps track where state changes originate.
- Best used when debugging complex reactive flows.
-->

---

<!-- ================================== -->
<!-- Example 4: Tracing Effects with $inspect.trace -->
<!-- ================================== -->

<!-- Demonstrates how `$inspect.trace()` tracks function re-execution due to reactive state changes. -->

---

<!-- Filename: App.svelte -->
<script>
	import { doSomeWork } from './utils';

	$effect(() => {
		$inspect.trace(); // Logs which state changes caused this effect to run
		doSomeWork();
	});
</script>

---

<!-- Notes:
- `$inspect.trace()` is useful inside `$effect()` to track reactivity.
- When the effect re-runs, it logs which state triggered the change.
- Added in Svelte 5.14.
-->
