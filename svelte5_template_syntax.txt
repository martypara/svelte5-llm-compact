# Svelte 5 Template Syntax

<!-- ================================== -->
<!-- Example 1: Basic HTML Markup in Svelte -->
<!-- ================================== -->

<!-- Demonstrates how to use basic HTML tags and Svelte components inside a Svelte file. -->

---

<!-- Filename: App.svelte -->
<script>
    import Widget from './Widget.svelte';
</script>

<div>
    <Widget /> <!-- This is a component, distinguished by its capitalized name -->
</div>

---

<!-- Notes:
- Regular HTML tags like `<div>` work as expected.
- Components are identified by capitalized names like `<Widget />`.
-->

<!-- ================================== -->
<!-- Example 2: Using Element Attributes -->
<!-- ================================== -->

<!-- Demonstrates how to use standard HTML attributes and dynamic attributes in Svelte. -->

---

<!-- Filename: App.svelte -->
<script>
    let p = 5;
    let clickable = false;
</script>

<div class="container">
    <button disabled>Can't touch this</button> <!-- Static attribute -->
    <input type="checkbox" /> <!-- Unquoted attribute value -->
    <a href="page/{p}">Page {p}</a> <!-- Dynamic attribute -->
    <button disabled={!clickable}>Click me</button> <!-- Conditional attribute -->
</div>

---

<!-- Notes:
- Attributes behave like HTML attributes by default.
- Boolean attributes (`disabled`) are added if truthy, omitted if falsy.
- `{}` can be used inside attributes to bind JavaScript expressions.
-->

<!-- ================================== -->
<!-- Example 3: Shorthand for Attribute Binding -->
<!-- ================================== -->

<!-- Demonstrates how to simplify attribute bindings when the name and value are the same. -->

---

<!-- Filename: App.svelte -->
<script>
    let disabled = true;
</script>

<button {disabled}>Click me</button> <!-- Equivalent to disabled={disabled} -->

---

<!-- Notes:
- `{disabled}` is shorthand for `disabled={disabled}`.
- Works for both standard attributes and component props.
-->

<!-- ================================== -->
<!-- Example 4: Passing Props to a Component -->
<!-- ================================== -->

<!-- Demonstrates how to pass props (properties) to a Svelte component. -->

---

<!-- Filename: Widget.svelte -->
<script>
    export let foo;
    export let answer;
    export let text;
</script>

<p>{text} (Foo: {foo}, Answer: {answer})</p>

---

<!-- Filename: App.svelte -->
<script>
    import Widget from './Widget.svelte';
    let bar = "Some value";
</script>

<Widget foo={bar} answer={42} text="Hello" />

---

<!-- Notes:
- `export let` allows receiving props in a component.
- Props can be static (`text="Hello"`) or dynamic (`foo={bar}`).
-->

<!-- ================================== -->
<!-- Example 5: Spreading Props and Attributes -->
<!-- ================================== -->

<!-- Demonstrates how to spread multiple attributes or props into an element or component. -->

---

<!-- Filename: App.svelte -->
<script>
    let things = { class: "fancy", type: "button", disabled: true };
</script>

<button {...things}>Click me</button> <!-- Spreads multiple attributes -->

---

<!-- Notes:
- `{...things}` spreads all key-value pairs onto the element.
- Works for both standard elements and Svelte components.
-->

<!-- ================================== -->
<!-- Example 6: Handling Events in Svelte -->
<!-- ================================== -->

<!-- Demonstrates event binding using `on:event` syntax. -->

---

<!-- Filename: App.svelte -->
<script>
    function handleClick() {
        alert('Button clicked!');
    }
</script>

<button on:click={handleClick}>Click me</button>

---

<!-- Notes:
- `on:click` listens for the `click` event.
- The event handler is a normal JavaScript function.
-->

<!-- ================================== -->
<!-- Example 7: Event Shorthand Syntax -->
<!-- ================================== -->

<!-- Demonstrates how to use shorthand syntax for event listeners. -->

---

<!-- Filename: App.svelte -->
<script>
    let onclick = () => alert('Button clicked!');
</script>

<button {onclick}>Click me</button> <!-- Shorthand for on:click={onclick} -->

---

<!-- Notes:
- `{onclick}` is shorthand for `on:click={onclick}`.
- Works when the variable name matches the event name.
-->

<!-- ================================== -->
<!-- Example 8: Conditional Rendering with {#if} -->
<!-- ================================== -->

<!-- Demonstrates how to conditionally render content using `{#if ...}{/if}`. -->

---

<!-- Filename: App.svelte -->
<script>
    let answer = 42;
</script>

{#if answer === 42}
    <p>What was the question?</p>
{/if}

---

<!-- Notes:
- `{#if}` allows conditional rendering based on expressions.
- Closes with `{/if}`.
-->

<!-- ================================== -->
<!-- Example 9: Using {#each} for Loops -->
<!-- ================================== -->

<!-- Demonstrates iterating over an array using `{#each}`. -->

---

<!-- Filename: App.svelte -->
<script>
    let items = [
        { name: "Apples", qty: 5 },
        { name: "Bananas", qty: 10 }
    ];
</script>

<ul>
    {#each items as item}
        <li>{item.name} x {item.qty}</li>
    {/each}
</ul>

---

<!-- Notes:
- `{#each}` iterates over arrays.
- `item` represents each array element.
-->

<!-- ================================== -->
<!-- Example 10: Awaiting Promises with {#await} -->
<!-- ================================== -->

<!-- Demonstrates handling asynchronous data with `{#await}`. -->

---

<!-- Filename: App.svelte -->
<script>
    let promise = new Promise(resolve => setTimeout(() => resolve("Data Loaded!"), 2000));
</script>

{#await promise}
    <p>Loading...</p>
{:then value}
    <p>{value}</p>
{:catch error}
    <p>Error: {error.message}</p>
{/await}

---

<!-- Notes:
- `{#await}` handles promises.
- Supports `{:then}` for resolved values and `{:catch}` for errors.
-->

<!-- ================================== -->
<!-- Example 11: Basic Two-Way Binding -->
<!-- ================================== -->

<!-- This example demonstrates the basic use of `bind:value` for two-way data binding with an input element. -->

---

<!-- Filename: App.svelte -->
<script>
    let message = $state('Hello, world!');
</script>

<input bind:value={message} />
<p>{message}</p>

<!-- The input field and paragraph are synchronized. Changing the input updates the paragraph and vice versa. -->

---

<!-- ================================== -->
<!-- Example 12: Numeric Input Binding -->
<!-- ================================== -->

<!-- Demonstrates how `bind:value` automatically coerces number inputs. -->

---

<!-- Filename: App.svelte -->
<script>
    let count = $state(0);
</script>

<input type="number" bind:value={count} />
<p>Count: {count}</p>

<!-- When an empty value is entered, `count` becomes `undefined`. -->

---

<!-- ================================== -->
<!-- Example 13: Binding with Custom Getters and Setters -->
<!-- ================================== -->

<!-- This example uses `bind:value={get, set}` for transforming input data before storing it. -->

---

<!-- Filename: App.svelte -->
<script>
    let message = $state('Hello');

    function get() {
        return message.toUpperCase();
    }

    function set(value) {
        message = value.toLowerCase();
    }
</script>

<input bind:value={get, set} />
<p>{message}</p>

<!-- The input always displays an uppercase message, but stores it in lowercase. -->

---

<!-- ================================== -->
<!-- Example 14: Checkbox Binding -->
<!-- ================================== -->

<!-- Demonstrates how `bind:checked` synchronizes checkbox state with a variable. -->

---

<!-- Filename: App.svelte -->
<script>
    let accepted = $state(false);
</script>

<label>
    <input type="checkbox" bind:checked={accepted} />
    Accept terms and conditions
</label>

<p>{accepted ? "Accepted" : "Not accepted"}</p>

---

<!-- ================================== -->
<!-- Example 15: Radio Group Binding -->
<!-- ================================== -->

<!-- Uses `bind:group` to bind radio inputs to a single variable. -->

---

<!-- Filename: App.svelte -->
<script>
    let selection = $state('Option 1');
</script>

<label><input type="radio" bind:group={selection} value="Option 1" /> Option 1</label>
<label><input type="radio" bind:group={selection} value="Option 2" /> Option 2</label>
<label><input type="radio" bind:group={selection} value="Option 3" /> Option 3</label>

<p>Selected: {selection}</p>

---

<!-- ================================== -->
<!-- Example 16: Multiple Checkbox Binding -->
<!-- ================================== -->

<!-- Uses `bind:group` to manage a list of selected checkboxes. -->

---

<!-- Filename: App.svelte -->
<script>
    let selectedItems = $state([]);
</script>

<label><input type="checkbox" bind:group={selectedItems} value="Item A" /> Item A</label>
<label><input type="checkbox" bind:group={selectedItems} value="Item B" /> Item B</label>
<label><input type="checkbox" bind:group={selectedItems} value="Item C" /> Item C</label>

<p>Selected items: {selectedItems.join(', ') || "None"}</p>

---

<!-- ================================== -->
<!-- Example 17: File Input Binding -->
<!-- ================================== -->

<!-- Demonstrates `bind:files` for handling selected files. -->

---

<!-- Filename: App.svelte -->
<script>
    let files = $state();

    function clearFiles() {
        files = new DataTransfer().files;
    }
</script>

<input type="file" bind:files accept="image/*" multiple />
<button onclick={clearFiles}>Clear</button>

<ul>
    {#each files as file}
        <li>{file.name} ({file.size} bytes)</li>
    {/each}
</ul>

---

<!-- ================================== -->
<!-- Example 18: Select Dropdown Binding -->
<!-- ================================== -->

<!-- Demonstrates `bind:value` with a select dropdown. -->

---

<!-- Filename: App.svelte -->
<script>
    let selected = $state('Option B');
</script>

<select bind:value={selected}>
    <option>Option A</option>
    <option>Option B</option>
    <option>Option C</option>
</select>

<p>Selected: {selected}</p>

---

<!-- ================================== -->
<!-- Example 19: Multi-Select Dropdown -->
<!-- ================================== -->

<!-- Uses `bind:value` to select multiple options in a `<select>` element. -->

---

<!-- Filename: App.svelte -->
<script>
    let selectedOptions = $state([]);
</script>

<select multiple bind:value={selectedOptions}>
    <option>Apple</option>
    <option>Banana</option>
    <option>Cherry</option>
</select>

<p>Selected: {selectedOptions.join(', ') || "None"}</p>

---

<!-- ================================== -->
<!-- Example 20: Binding an Audio Element -->
<!-- ================================== -->

<!-- Demonstrates `bind:currentTime` and `bind:paused` with an audio player. -->

---

<!-- Filename: App.svelte -->
<script>
    let currentTime = $state(0);
    let paused = $state(true);
</script>

<audio src="audio.mp3" bind:currentTime bind:paused controls></audio>
<p>Time: {currentTime.toFixed(2)}s</p>
<p>Paused: {paused ? "Yes" : "No"}</p>

---
---

<script>
    import Widget from './Widget.svelte';
</script>

<!-- Tags: HTML elements & components -->
<div>
    <Widget />
</div>

<!-- Attributes: Work like HTML, support JS expressions -->
<button disabled={!clickable}>...</button>
<a href="page/{p}">page {p}</a>
<input required={false} /> <!-- Not required -->

<!-- Shorthand: When name & value match -->
<button {disabled}>...</button>

<!-- Component props -->
<Widget foo={bar} answer={42} text="hello" />
<Widget {...things} /> <!-- Spread props -->

<!-- Events -->
<button onclick={() => console.log('clicked')}>click me</button>
<button {onclick}>click me</button> <!-- Shorthand -->

<!-- Text expressions -->
<h1>Hello {name}!</h1>
<p>{a} + {b} = {a + b}.</p>
{@html potentiallyUnsafeHtmlString} <!-- Render raw HTML (beware of XSS) -->

<!-- Comments -->
<!-- This is a comment -->
<!-- svelte-ignore a11y_autofocus -->
<input autofocus />